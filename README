Task Manager API

An authenticated RESTful API for managing user tasks, built with Django Rest Framework and containerized using Docker Compose.

üöÄ Key Features
User Authentication: Secure access using Token-based Authentication.

Containerized Development: Consistent, isolated environment using Docker and Docker Compose.

Production-Ready Server: Utilizes Gunicorn for stable request handling.

Core Task Management: CRUD operations for tasks (Create, Read, Update, Delete).

Filtering & Sorting: Supports filtering tasks by status and priority, and sorting by due_date.

‚öôÔ∏è Setup and Installation
Prerequisites
You must have the following installed on your local machine:

Docker

Docker Compose

Postman (or a similar HTTP client for testing)

Steps
Clone the Repository:

Bash

git clone [Your GitHub URL]
cd capstone_project
Create Environment File:
Create a .env file in the project root directory and add your secret keys and database configuration. DO NOT commit this file.

Code snippet

# .env Example

SECRET_KEY='[Your Django Secret Key]'
DEBUG=True
MYSQL_DATABASE=[Your DB Name]
MYSQL_USER=[Your DB User]
MYSQL_PASSWORD=[Your DB Password]
MYSQL_ROOT_PASSWORD=[Your Root Password]
Build and Run the Containers:
This command builds the images, installs dependencies (including Gunicorn and django-filter), applies the necessary Gunicorn proxy fix, and starts all services in the background.

Bash

docker compose up --build -d
Initialize the Database:
Once the web container is running, run migrations to set up the database schema:

Bash

docker compose exec web python manage.py migrate

üîë Authentication and Access

1. Create a User
Endpoint: POST /api/accounts/register/ (or your registration URL)

Result: This process will create a new user. The API requires a separate step to generate a token for that user.

2. Obtain an Authentication Token
Endpoint: POST /api/accounts/login/ (or your token generation URL)

Result: Returns a 40-character token string (e.g., 987f6e5d4c3b2a10f9e8d7c6b5a40987f6e5d4c3).

3. Authenticate API Requests
For every protected endpoint, you must include the following header:

Key Value
Authorization Token [Your Token String]

üìã API Endpoints (Task Management)
The following endpoints are protected and require a valid Authorization Token.

Endpoints

GET -> /api/tasks/ -> List all user tasks (or filter them). ?status=PENDING&ordering=-due_date
POST -> /api/tasks/ -> Create a new task. -> (requires JSON body)
GET -> /api/tasks/{id}/ -> Retrieve a single task by ID.
PUT/PATCH -> /api/tasks/{id}/ -> Update or partially update a task ->(requires JSON body)
DELETE -> /api/tasks/{id}/ -> Delete a single task.

Coding partner
A README file should serve as the main introduction and guide for your project. Based on the work we've done (setting up a Dockerized Django Rest Framework API with Gunicorn and fixing authentication), here is a structure and the essential content your README.md should contain.

Project Title
Task Manager API
An authenticated RESTful API for managing user tasks, built with Django Rest Framework and containerized using Docker Compose.

üöÄ Key Features
User Authentication: Secure access using Token-based Authentication.

Containerized Development: Consistent, isolated environment using Docker and Docker Compose.

Production-Ready Server: Utilizes Gunicorn for stable request handling.

Core Task Management: CRUD operations for tasks (Create, Read, Update, Delete).

Filtering & Sorting: Supports filtering tasks by status and priority, and sorting by due_date.

‚öôÔ∏è Setup and Installation
Prerequisites
You must have the following installed on your local machine:

Docker

Docker Compose

Postman (or a similar HTTP client for testing)

Steps
Clone the Repository:

Bash

git clone [Your GitHub URL]
cd capstone_project
Create Environment File:
Create a .env file in the project root directory and add your secret keys and database configuration. DO NOT commit this file.

Code snippet

# .env Example

SECRET_KEY='[Your Django Secret Key]'
DEBUG=True
MYSQL_DATABASE=[Your DB Name]
MYSQL_USER=[Your DB User]
MYSQL_PASSWORD=[Your DB Password]
MYSQL_ROOT_PASSWORD=[Your Root Password]
Build and Run the Containers:
This command builds the images, installs dependencies (including Gunicorn and django-filter), applies the necessary Gunicorn proxy fix, and starts all services in the background.

Bash

docker compose up --build -d
Initialize the Database:
Once the web container is running, run migrations to set up the database schema:

Bash

docker compose exec web python manage.py migrate
üîë Authentication and Access

1. Create a User
Endpoint: POST /api/accounts/register/ (or your registration URL)

Result: This process will create a new user. The API requires a separate step to generate a token for that user.

2. Obtain an Authentication Token
Endpoint: POST /api/accounts/login/ (or your token generation URL)

Result: Returns a 40-character token string (e.g., 987f6e5d4c3b2a10f9e8d7c6b5a40987f6e5d4c3).

3. Authenticate API Requests
For every protected endpoint, you must include the following header:

Key Value
Authorization Token [Your Token String]

Export to Sheets
üìã API Endpoints (Task Management)
The following endpoints are protected and require a valid Authorization Token.

Method URL Description Example Query
GET /api/tasks/ List all user tasks (or filter them). ?status=PENDING&ordering=-due_date
POST /api/tasks/ Create a new task. N/A (requires JSON body)
GET /api/tasks/{id}/ Retrieve a single task by ID. N/A
PUT/PATCH /api/tasks/{id}/ Update or partially update a task. N/A (requires JSON body)
DELETE /api/tasks/{id}/ Delete a single task. N/A

Export to Sheets
Filtering and Sorting Parameters
You can combine the following query parameters on the GET /api/tasks/ endpoint:

Parameter Function Example
status Filters by exact status (e.g., PENDING, COMPLETED). ?status=PENDING
priority Filters by exact priority (e.g., HIGH, MEDIUM, LOW). ?priority=HIGH
ordering Sorts the results by a specified field. Use - for descending. ?ordering=-due_date (Latest due date first)
due_date__gt Filters for tasks due after this date. ?due_date__gt=2025-10-15

üõ†Ô∏è Development Notes
Gunicorn Proxy Fix: The Gunicorn server is configured with the --proxy-allow-from * flag to ensure the Authorization header is correctly passed through the Docker networking layer to Django.

Database Access (Optional): If you are using an admin service (like Adminer), you can access it at <http://localhost:8081> to view database tables.
